{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww22180\viewh13280\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 This is Max. Welcome.\
\
Make a new object. You can do it by dragging from the top-left or by pressing n.\
\
Type obj:cycle~ into the object box. You\'92ll see a few autocomplete options. Autocomplete is helpful. Don\'92t do the cycle object, do the cycle~ object.\
\
After cycle, type your favorite number between 200 and 500. This is called an argument. Arguments initialize the state of your object.\
\
Now we need a obj:gain~ object. There\'92s a few ways to get this. The first is to click the little plus, then to go to audio, then drag the gain~ into your patch. No one does this, ever. Instead, start typing gain~ into a new object box. (Talk about inlets and outlets)\
\
Now to connect these objects. Cycle~ has one outlet. Gain~ has one inlet. Connect them.\
\
Finally, make an object called obj:ezdac~. This object connects sound generated in Max to the output of your machine. Take the gain~ object and connect it to the ezdac~. Connect it to both inlets (right and left channels). Now, lock the patch by pressing command-e. Apparently this is called performance mode, which I never knew. Crank up the gain (slowly you madman). Listen. Cool.\
\
You can also turn audio on and off by clicking in the bottom-right. You can also adjust per-patcher audio here, which is a new and sexy feature in Max 7. Pretty nice.\
\
If things aren\'92t working, you might have forgotten the space after cycle~. It\'92s also possible that your gain is down. Also it\'92s possible that audio is off. In general, debugging stuff in Max is a process of walking through your chain, and making sure that each element in your chain is eating and excreting what you\'92d expect.\
\
Okay, there\'92s another great object called obj:number~. This object displays the actual value of a signal. Make a number~ object and connect it to the output of cycle~. It basically looks like random numbers, huh? You can also make one and connect it to gain~. You\'92ll notice that it\'92s always a constant multiple of the other cycle~ object (gain~ just scales stuff).\
\
There\'92s an object called obj:scope~ that\'92s much better in some applications at observing a signal. You can make it by typing scope~. Duh. Connect it to cycle~ and to gain~.\
\
Cool. So what does this cycle object do? Option-click on it to bring up the help file. This is maybe one of the nicest things about Max: every single object has a help file that you can access by option-clicking. Lot\'92s of time you might forget what an object does, so this is handy. \
\
Let\'92s bring up the inspector to fix this scope~ object so that we can actually see what\'92s going on. If you select multiple object, then you can inspect them together (particularly handy for this scope~ object).\
\
If you want to select patch cords with objects, you can do so by holding option as you drag.\
\
If you\'92re objects are all over the place, then press command-y to wrangle them together. \
\
Finally, if you just want to know what an inlet does, you can control-click that inlet to bring up the quick reference menu.\
\
REVIEW:\
- Command-e to lock/unlock. Interact while locked, modify and select while unlocked.\
- Just \'92n\'92 to make a new object. \
- Command-i to open the inspector\
- Command-m to open the Max Window (check here first if things aren\'92t working)\
- Turn audio on/off with the ezdac object, or by tapping the little button in the bottom-right.\
\'97\'97\'97\'97\'97\'97\'97\'97\
\
K, now let\'92s change frequency. Press \'91f\'92 to make a floating point number box. This is different from an integer number box in that it displays numbers with decimals. As you click and drag up you\'92ll notice that pitch changes. Cool.\
\
Last thing that I really want to talk about is snippets. You\'92ll be making and remaking patches all the time, and quite often, and often when you do this you\'92ll be using the same little pieces over and over. You can reduce bugs and speed up your patching by using snippets. \
\
Make an object called obj:live.gain~. This is the same as the gain~ object from before, except it shows you the sound amplitude (which is really nice). Make another ezdac~. Connect the first outlet of live.gain~ to the first inlet of live.gain~, and the second outlet of live.gain~ to the second inlet of ezdac~. Finally, press \'91m\'92 to make a new Message Box. Don\'92t worry so much about what this is just yet. Now, type \'91startwindow\'92 into the message box. Connect it to the ezdac~. Now select all three and click on this \'93add snippet\'94 button. I recommend naming it something like irc.output or something like that. Giving it a prefix like \'93irc.\'94 will make it easier to find later. \
\
Now see how you can drag this into your patch later. Isn\'92t that nice? Really cool if you ask me. Let\'92s take a second now to bring up the file browser. We\'92ll talk more about this guy as the course goes on, but for now let\'92s look at it to find snippets.\
\
If you double-click on a snippet, you can edit it. The description is just for you. Here\'92s a preview image. You can also edit tags, which are useful ways to find your snippets later. Finally, you can click on this copy icon to copy the snippet. It can then be pasted into the patch later. Pretty cool, eh?\
\
Maybe let\'92s take a quick stretch break.\
\
Okay we\'92re back. \
\
Make a obj:metro object and give it the argument 250. This object releases bangs at regular intervals. What is a bang? Well, it\'92s a message. What is a message? That\'92s how objects communicate. They send each other messages. The bang message is the simplest possible message. It just means do it.\
\
Press \'92t\'92 to make a toggle object. Connect that to the metro object. Press \'91b\'92 to make a button object. Connect the metro object to it. Now lock and press the toggle object. Receiving a \'911\'92 activates the metro, which causes it to start outputting bangs. Nice. If we want to change the tempo of the metronome, then we can use a floating point object. Note that this is the interval in milliseconds between events, rather than tempo or something like that. \
\
Let\'92s do something with the output of this metro. Connect it to a obj:random object with the argument 1000. Connect that to an integer box. As you can see, this generates random numbers between 0 and 1000. We can pass this directly to the cycle~ thing that we made before, which lets us pick random frequencies. Very exciting. \
\
Now, right now this patch isn\'92t particularly performative. Let\'92s add some controls for more interaction. First, let\'92s make it so we can activate and deactivate the metronome by pressing spacebar. This will just the obj:key, obj:keyup, obj:select objects. We can use this to start and stop our metronome. Let\'92s also add an obj:comment to explain what all this does. Finally, let\'92s save it as a snippet called space toggle.\
\
With that done let\'92s add an obj:mousestate object to control the rate that the metro is going at. This will use a obj:/ and an obj:scale. Scale is an extremely important object that we will be using all the damned time. We\'92ll also need the obj:loadbang object to start mousestate automatically. Another extremely important object we\'92ll use all the time. \
\
If we want to get fancy, we can also use the X position of the mousestate object to adjust the frequency range of our metronome as well. And with that we have a really simple, if very annoying, noise making machine. That\'92s great I suppose.\
\
Let\'92s talk about how to get sound out of Max. The easiest way to handle this is with the quickrecord extra. The extras have all kinds of stuff that can be highly useful to you. There\'92s the CPU monitor, the audio tester and more. Quickrecord lets you take pieces of audio and output them. So take this controller that you\'92ve just made and make some recordings. Then, use the audio mixer application of your choice to edit them together. If you don\'92t have an application that you\'92d like to use, I\'92d recommend Audacity, which is free. }